use clap::Parser;
//use serde::Deserialize;
use toml::{self, Table};
use std::fs::File;
use std::io::Read;

//use std::os::unix::fs::symlink;


#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
    #[arg(short, long)]
    name: String,

    #[arg(short, long, default_value_t = 18)]
    age: u8,
}

fn main() -> std::io::Result<()> {

    let mut file = File::open("test.toml").expect("Failed to open test.toml");
    let mut contents = String::new();
    file.read_to_string(&mut contents).expect("Failed to read file");

    let table = contents.parse::<toml::Value>().expect("Failed to parse TOML");

    let mut p = "".to_string();
    print_table(&table.as_table().unwrap(), &mut p);
    //let args = Args::parse();

    //println!("Welcome {} with the age of {}!", args.name, args.age);

    //symlink("a.txt", "b.txt")?;

    Ok(())
}

fn print_table(table: &Table, prefix: &mut String) {
    for (key, value) in table.iter() {
	if value.is_table() {
	    prefix.push_str(key);
	    prefix.push_str(" => ");
	    
	    print_table(&value.as_table().unwrap(), prefix);

	    let trunc_len = key.len() + " => ".len();
	    prefix.truncate(prefix.len() - trunc_len);
	    
	    continue;
	}
	
	println!("{}{} => {}", prefix, key, value);
    }
}
